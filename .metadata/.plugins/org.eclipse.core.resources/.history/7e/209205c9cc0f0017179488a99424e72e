package com.datax.play.spark

import org.apache.spark.SparkConf;
import org.apache.spark.SparkContext

object counter {
  
    //val conf = new SparkConf().setAppName("counter").setMaster("local[*]")
    
    //val sc= new SparkContext(conf)
    
    //val text = sc.textFile("input/*.txt")  
  
  def main (args: Array[String]): Unit = {
    
     val test = List(1,3,5,7) 
     
     //println(test.apply(0))
     
     //println(test.take(1))
     
     
     
     for (i <- 0 to test.size){
       println(test.apply(i))
       
     }
     
    //println(countTuples("Berlin","Zurich"))
    
   //countCreateTuples("Berlin")
    
   // println("Hello back Scala")
    
   // val conf = new SparkConf().setAppName("counter").setMaster("local[*]")
    
   // val sc= new SparkContext(conf)
   
   // val text = sc.textFile("input/*.txt")
    
      //text.flatMap{line=>line.split(" ")}.map{word=>(word,1)}.reduceByKey(_+_).saveAsTextFile("output.txt")
      
      //println(text.flatMap{line=>line.split(" ")}.filter(x=>x.equals("Berlin")).count())
      
      
      
    
    //text.flatMap{line=>line.split(" ")}
    
    
    //This expression creates a tuple of the words in the document and its counts
    /*
    
    text.flatMap{line=>line.split(" ")}
    .map{word=>(word,1)}
    .reduceByKey(_+_).saveAsTextFile("output.txt")
    
    */
    
    //println("Work is completed")
    
    
    
  }
  
  //def countTuples (first: String, second: String) : Long = {
    //val result = text.flatMap{line=>line.split(" ")}.filter(x=>x.equals(first)).count()
    //return result;
  //}
  
  
  def countCreateTuples(first: String){
    
    println("Hello back Scala")
     
    
    //println(text.flatMap{line=>line.split(" ")}.filter(x=>x.equals(first)).count())
    
    //text.flatMap{line=>line.split(" ")}.foreach(x=>println(x))
    
    //val list = text.flatMap{line=>line.split(" ")}.collect().toList
    
    //println("We are done")
    
    return "tonto"
    
  }
  
  def countTargets(target1 : String, target2 : String, list :List[String]) : Integer = {
    for ( i <- 0 to list.size){
      
    }
    
    return 1
    
  }
  
  
}