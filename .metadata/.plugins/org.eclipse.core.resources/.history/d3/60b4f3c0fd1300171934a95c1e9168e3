package multithreading

import java.awt.Graphics2D
import scala.swing.MainFrame
import java.awt.image.BufferedImage
import scala.swing.Panel
import java.awt.Dimension
import java.awt.Color

object Mandelbrot {
  
  val img = new BufferedImage(500,500,BufferedImage.TYPE_INT_ARGB)
 
  val panel = new Panel {
    override def paint(g: Graphics2D){
      g.drawImage(img,0,0,null)
    }
    preferredSize = new Dimension(img.getWidth(),img.getHeight())
  }
  val frame = new MainFrame {
    title ="Mandelbrot"
    contents = panel
    centerOnScreen
  }  
  

  /*
   * Calculates the number of iterations of the Mandelbroth sequence before magnitude goes
   * above 4 up to max.
   * 
   * z = z^2 + c
   */
  def calcMandel(cr: Double, ci: Double, maxCnt: Int): Int = {
    var zr = 0.0
    var zi = 0.0
    var cnt = 0
    while (cnt<maxCnt && zr*zr+zi*zi<16) {
      
    }
  }
  
  def main(args: Array[String]): Unit = {
    var maxCnt = 1000
    for (i <- 0 until img.getHeight(); j <- 0 until img.getWidth){
      val cnt = calcMandel(r,i)
      if (cnt < maxCnt) img.setRGB(j,i,Color.black.getRGB)
      else img.setRGB(j,i,Color.white.getRGB)
    }
    frame.open()
    
  }
  
  
  
}