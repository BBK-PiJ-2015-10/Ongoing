package bloomberginterview;

import java.util.Arrays;
import java.util.List;

import junit.*;

public class Palindrome {

	public static void main(String[] args) {
		
	   Palindrome pr = new Palindrome();
	   pr.stringMethods();
		

	}
	
	
	private void stringMethods(){
		
		//System.out.println(isPalindrome("ale"));
		
		System.out.println(makePalindrome("ton"));
		 //System.out.println(isPalindrome("ata"));
		
		//ale
		//aleale
		
		 ///*
		 evalTest(1,"tt",makePalindrome("t"));
		 evalTest(2,"tt",makePalindrome("tt"));
		 evalTest(3,"taat",makePalindrome("taat"));
		 evalTest(4,"",makePalindrome(""));
		 evalTest(5,"ata",makePalindrome("ta"));
		 evalTest(6,"taxat",makePalindrome("taxat"));
		 evalTest(7,"tttt",makePalindrome("tttt"));
		 evalTest(8,"tztzt",makePalindrome("ztzt"));
		 evalTest(8,"elale",makePalindrome("ale"));
		 //evalTest(8,"otonto",makePalindrome("tonto"));
		 //evalTest(5,"ttaxaat",makePalindrome("taxaat"));
		 
		 //*/

	}
	
	
	public String makePalindrome(String word){
		if (isPalindrome(word)){
			return word;
		}
		if (word.length()<=1){
			return word+word;
		}
		else {
			return makePalindromeAux(word,word.length(),0);
		}
		
	}
	
	public String makePalindromeAux(String word,int take,int in){
		String toinsert=word.substring(take-1,take);
		String pre=word.substring(0,in);
		String end=word.substring(in);
		String newWord=pre+toinsert+end;
		if(isPalindrome(newWord)){
			return newWord;
		}
		else {
			return makePalindromeAux(newWord,take,1);
		}
	}
		
	
	public boolean isPalindrome(String word){
		if (word.isEmpty() || word.length()<2){
			return false;
		}
		return isPalindromeAux(word);
	}
	
	public boolean isPalindromeAux(String word){
		if (word.length()==1){
			return true;
		}
		char first=word.charAt(0);
		char last=word.charAt(word.length()-1);
		if (first==last){
			int newLength=word.length()-2;
			if (newLength>0){
				String newWord=word.substring(1,word.length()-1);
				return isPalindromeAux(newWord);
			}
			else {
				return true;
			}		
		}
		else {
			return false;
		}
	}
	
	
	
	
	
	public void evalTest(int test,String expected,String result){
		if (expected.equals(result)){
			System.out.println("Test: "+ test +" passed");
		}
		else {
			System.out.println("Test : "+ test +" failed");
		}
	}
	
	

	
	
	
	private String condensed(String input){
		String result ="";
		for (String word: Arrays.asList(input.split(" ")) ){
			result+=word;
		}
		return result;
	}
	
	
	private String condensedNonTailRec(String input){
		if (!input.contains(" ")){
			return input;
		}
		int pos = input.indexOf(" ");
		int next = pos+1;
		int last = input.length();
		String head=input.substring(0,pos);
		if (last>=next){
			String tail=input.substring(next);
			return head + condensedNonTailRec(tail);
		}
		else {
			return head;
		}
	}
	
	private String condensedTailRec(String input){
		if (!input.contains(" ")){
			return input;
		}
		else {
			return helperTR(input,"");
		}
		
	}
	
	private String helperTR(String input, String accum){
		if (!input.contains(" ") && (!input.isEmpty())){
			return accum+input;
		}
		int pos = input.indexOf(" ");
		int next = pos+1;
		int last = input.length();
		String head=input.substring(0,pos);
		String newAccum=accum+head;
		if (last>=next){
			String tail=input.substring(next);
			return helperTR(tail,(newAccum));
		}
			return newAccum;	
	}
	
	
	
	

}
