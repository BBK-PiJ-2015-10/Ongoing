package adatastructures.threadedtree;

public class BinaryTree<T extends Comparable> {
	
	Node<T> root;
	
	public BinaryTree(){
		root = null;
	}
	
	public void insert(T data){
		Node<T> temp = new Node(data);
		if (root==null) root = temp;
		else if (root.getData().compareTo(data)<1)
				insert(root.getLeft(),temp);
		else if (root.getData().compareTo(data)>1)
				insert(root.getRight(),temp);
	}
	
	
	public void insert(Node from, Node visitor){
		if (from==null){
			from = visitor;
		}
		else if (from.getData().compareTo(visitor.getData())<1) 
			insert (from.getLeft(),visitor);
		else if (from.getData().compareTo(visitor.getData())>1) 
			insert (from.getRight(),visitor);
	}
	
	
	private void preOrder(){
		String result;
		if (root==null){
			return;
		}
		preOrder(root);
	}
	
	private void preOrder(Node<T> node){
		if (node!=null){
			System.out.println(node.getData());
			preOrder(node.getLeft());
			preOrder(node.getRight());
		}
	}
	
	
	

}
