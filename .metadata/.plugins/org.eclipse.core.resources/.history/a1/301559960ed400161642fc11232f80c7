package theappbusiness;

import java.util.List;
import java.util.Map;
import java.util.HashMap;

import java.util.ArrayList;

public class Solution {

	public static void main(String[] args) {
		
		System.out.println("Is this working");
		
		List<Integer> list = new ArrayList();
		list.add(1);
		list.add(1);
		list.add(1);
		list.add(2);
		list.add(2);
		list.add(2);
		list.add(1);
		list.add(1);
		list.add(2);
		list.add(2);
		list.add(6);
		list.add(2);
		list.add(1);
		list.add(8);
		
		List<Integer> list2 = new ArrayList();
		list2.add(53);
		list2.add(800);
		list2.add(0);
		list2.add(0);
		list2.add(0);
		list2.add(356);
		list2.add(8988);
		list2.add(1);
		list2.add(1);
		
		List<Integer> list3 = new ArrayList();
		list3.add(2);
		list3.add(3);
		list3.add(1);
		list3.add(2);
		list3.add(1);
		list3.add(1);
		
		List<Integer> list4= new ArrayList();
		list4.add(0);

		System.out.println(calculateLargestSlice(list3));
		
	}
	

	private static int calculateLargestSlice(List<Integer> inputSequence)
    {
			class Slice {
			
			Integer val1=null;
			
			Integer val2=null;
			
			Integer beg=null;
			
			Integer end=null;
			
			boolean closed=false;
			
			public Slice(){	
			}
			
			public boolean constains(int input){
				if ((val1!=null && input==val1 )|| (val2!=null && input==val2)){
					return true;
				}
				return false;
			}
			
			public boolean getClosedStatus(){
				return this.closed;
			}
			
			public boolean spaceAvailable(){
				if (val2==null){
					return true;
				}
				return false;
			}
			
			public boolean needClosing(int input){
				if (closed==true){
					return false;
				}
				else if (!this.constains(input) && val1!=null && val2!=null ){
					closed=true;
					return true;
				}	
				return false;
			}
			
			public int getSize(){
				if (beg!=null && end!=null){
					return (end-beg)+1;
				}
				return 0;
			}

			public void setVal1(Integer val1) {
					this.val1 = val1;		
			}
			
			public Integer getVal1() {
				return val1;
			}
			
			public void setVal2(Integer val2) {
				this.val2 = val2;
			}
			
			public Integer getVal2() {
				return val2;
			}

			public void setBeg(Integer beg) {
				this.beg = beg;
			}

			public void setEnd(Integer end) {
				this.end = end;
			}
			
			public String toString(){
				return "Beg index " +beg +" val1 " + val1 + 
					   " End index " +end +" val2 " + val2 +
					   " size of " +this.getSize() +
					   " closing status " +this.closed
						;
			}
				
		}
		
			
		List<Slice> slices = new ArrayList();
		
        int maxSlice=0;
        
        Integer differents=0;
        Integer first=null;
        Integer second=null;
        Integer prior=null;
        
		for (int i=0;i<inputSequence.size();i++){
    	   Integer value = inputSequence.get(i);
		   if (prior==null || prior!=value){
			   if (value!=first && value!=second){
				   if (first==null){
					   first=value;
				   } else {
					   if (second==null){
						   second=value;
					   }
				   }
				   differents++;
			   }
			   
			   if (!slices.isEmpty()){
    			   for (Slice eval: slices){
        			   if (!eval.constains(value)){
        				   if (eval.spaceAvailable()){
        					   eval.setVal2(value);
        					   eval.setEnd(i);
        				   }
        				   if(eval.needClosing(value)){
        					   if(eval.getVal2()==prior){
        						   eval.setEnd(i-1);
        					   }
        				   };
        			   }
        			   else {
        				   if (eval.getVal1()==value && eval.getVal2()!=null && eval.getClosedStatus()==false){
        					   eval.setEnd(i);
        				   }
        			   }
        		   }
        	   }
    		   Slice temp = new Slice();
			   temp.setVal1(value);
			   temp.setBeg(i);
    		   slices.add(temp);
    		   prior=value;
    	    }	   
       }
	   for (Slice current: slices ){
		   if ((differents<=2) && (current.getClosedStatus()==false)){
			   current.setEnd(inputSequence.size()-1);
		   }
		   if (current.getSize()>maxSlice){
			   maxSlice=current.getSize();
		   }
	   }
       return maxSlice;
    }
	
	
}
