package adatastructures.threadedtree;

public class BinaryTree<T extends Comparable> {
	
	Node<T> root;
	
	public BinaryTree(){
		root = null;
	}
	
	public void insert(T data){
		root = insert(root, data);
	}
	
	
	public Node<T> insert(Node<T> node, T data){
		if (node==null){
			System.out.println("Inserting: " +data);
			node = new Node<T>(data);
		}
		else if (node.getData().compareTo(data)<1){
			node.setLeft(insert(node.getLeft(),data));
		}
		else if (node.getData().compareTo(data)>1) {
			node.setRight(insert(node.getRight(),data));
		}
		return node;
	}
	
	
	public void preOrder(){
		preOrder(root);
	}
	
	private void preOrder(Node<T> node){
		if (node!=null){
			System.out.println("This node has a value of " +node.getData());
			
			//System.out.println(node.getData());
			preOrder(node.getLeft());
			//preOrder(node.getRight());
		}
	}
	
	public int size(){
		if (root==null){
			return 0;
		}
		return size(root);
		
	}
	
	private int size (Node<T> node){
		if (node==null){
			return 0;
		}
		else {
			return 1 + size(node.getLeft())+size(node.getLeft());
		}
	}
	
	
	

}
