package adatastructures.threadedtree;

import java.util.Stack;

public class BinaryTree<T extends Comparable> {
	
	Node<T> root;
	
	public BinaryTree(){
		root = null;
	}
	
	public void insert(T data){
		root = insert(root, data);
	}
	
	
	public Node<T> insert(Node<T> node, T data){
		if (node==null){
			//System.out.println("Inserting: " +data);
			node = new Node<T>(data);
		}
		else if (node.getData().compareTo(data)==1){
			//System.out.println("Ale tonto");
			//System.out.println("Moving to left since: " +node.getData() +" is greater than " +data );
			node.setLeft(insert(node.getLeft(),data));
		}
		else if (node.getData().compareTo(data)==-1) {
			//System.out.println("Moving to right since: " +node.getData() +" is less than " +data );
			node.setRight(insert(node.getRight(),data));
		}
		return node;
	}
	
	
	public void preOrder(){
		preOrder(root);
	}
	
	private void preOrder(Node<T> node){
		if (node!=null){		
			System.out.println(node.getData());
			preOrder(node.getLeft());
			preOrder(node.getRight());
		}
	}
	
	private void inOrder(){
		if (root!=null){
			Stack<Node<T>> stack = new Stack();
			inOrder(root,stack);
		}
	}
	
	public void inOrderLoop(){
		if (root==null){
			return;
		}
		Stack<Node<T>> stack = new Stack();
		stack.push(root);
		Node<T> temp = root;
		while (!stack.isEmpty()){
			if(temp.getLeft()!=null){
				stack.push(temp.getLeft());
				temp = temp.getLeft();
			}
			temp = stack.pop();
			System.out.println(temp.getData());
			if (temp.getRight()!=null){
				stack.push(temp.getRight());
				temp=temp.getRight();
			}
		}
	}
	
	private void inOrder(Node<T> node,Stack<Node<T>> stack){
		if (node!=null){
			stack.push(node);
			inOrder(node.getLeft(),stack);
		}
		Node<T> temp=stack.pop();
		System.out.println(temp.getData());
		if (temp.getRight()!=null){
			inOrder(temp.getRight(),stack);
		}
		
	}
	
	
	public int size(){
		return size(root);	
	}
	
	private int size (Node<T> node){
		if (node==null){
			return 0;
		}
		else {
			return 1 + size(node.getLeft())+size(node.getRight());
		}
	}
	
	
	

}
